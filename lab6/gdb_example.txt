Script started on 2020-02-13 12:11:53-0500
wolf:~/Documents/csc209/zhuobenj/lab6$ gdb overflow
GNU gdb (Ubuntu 8.1-0ubuntu3.2) 8.1.0.20180409-git
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from overflow...done.
(gdb) break 13
Breakpoint 1 at 0x7ac: file overflow.c, line 13.
(gdb) vreak 14[K[K[K[K[K[K[K[Kbreak 14
Breakpoint 2 at 0x7b8: file overflow.c, line 14.
(gdb) run
Starting program: /h/u9/c9/00/zhuobenj/Documents/csc209/zhuobenj/lab6/overflow 

Breakpoint 1, main () at overflow.c:13
13          printf("Address of the variables:\n");
(gdb) con[K[K[Kdisplay a
1: a = {0, 0, 0, 0}
(gdb) display after
2: after = {10, 10, 10, 10}
(gdb) d[Kd[Kcontinue
Continuing.
Address of the variables:

Breakpoint 2, main () at overflow.c:14
14          for (index = 0; index < SIZE; index++) {
1: a = {0, 0, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) cont[K[K[K[Knext
15              printf("%lx -> &after[%d]\n", (unsigned long) &after[index], index);
1: a = {0, 0, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) 
7fffffffe930 -> &after[0]
14          for (index = 0; index < SIZE; index++) {
1: a = {0, 0, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) 
15              printf("%lx -> &after[%d]\n", (unsigned long) &after[index], index);
1: a = {0, 0, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) 
7fffffffe934 -> &after[1]
14          for (index = 0; index < SIZE; index++) {
1: a = {0, 0, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) 
15              printf("%lx -> &after[%d]\n", (unsigned long) &after[index], index);
1: a = {0, 0, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) 
7fffffffe938 -> &after[2]
14          for (index = 0; index < SIZE; index++) {
1: a = {0, 0, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) 
15              printf("%lx -> &after[%d]\n", (unsigned long) &after[index], index);
1: a = {0, 0, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) 
7fffffffe93c -> &after[3]
14          for (index = 0; index < SIZE; index++) {
1: a = {0, 0, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) 
17          for (index = 0; index < SIZE; index++) {
1: a = {0, 0, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) 
18              printf("%lx -> &a[%d]\n", (unsigned long) &a[index], index);
1: a = {0, 0, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) 
7fffffffe920 -> &a[0]
17          for (index = 0; index < SIZE; index++) {
1: a = {0, 0, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) 
18              printf("%lx -> &a[%d]\n", (unsigned long) &a[index], index);
1: a = {0, 0, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) 
7fffffffe924 -> &a[1]
17          for (index = 0; index < SIZE; index++) {
1: a = {0, 0, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) 
18              printf("%lx -> &a[%d]\n", (unsigned long) &a[index], index);
1: a = {0, 0, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) 
7fffffffe928 -> &a[2]
17          for (index = 0; index < SIZE; index++) {
1: a = {0, 0, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) 
18              printf("%lx -> &a[%d]\n", (unsigned long) &a[index], index);
1: a = {0, 0, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) 
7fffffffe92c -> &a[3]
17          for (index = 0; index < SIZE; index++) {
1: a = {0, 0, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) 
20          for (index = 0; index < SIZE; index++) {
1: a = {0, 0, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) 
21              printf("%lx -> &before[%d]\n", (unsigned long) &before[index], index);
1: a = {0, 0, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) 
7fffffffe910 -> &before[0]
20          for (index = 0; index < SIZE; index++) {
1: a = {0, 0, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) 
21              printf("%lx -> &before[%d]\n", (unsigned long) &before[index], index);
1: a = {0, 0, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) 
7fffffffe914 -> &before[1]
20          for (index = 0; index < SIZE; index++) {
1: a = {0, 0, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) 
21              printf("%lx -> &before[%d]\n", (unsigned long) &before[index], index);
1: a = {0, 0, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) 
7fffffffe918 -> &before[2]
20          for (index = 0; index < SIZE; index++) {
1: a = {0, 0, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) 
21              printf("%lx -> &before[%d]\n", (unsigned long) &before[index], index);
1: a = {0, 0, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) 
7fffffffe91c -> &before[3]
20          for (index = 0; index < SIZE; index++) {
1: a = {0, 0, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) 
23          printf("%lx -> &i\n", (unsigned long)&i);
1: a = {0, 0, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) 
7fffffffe90c -> &i
24          printf("%lx -> &index\n", (unsigned long)&index);
1: a = {0, 0, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) 
7fffffffe908 -> &index
25          printf("\n");
1: a = {0, 0, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) 

28          printf("Initial values:\n");
1: a = {0, 0, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) 
Initial values:
29          printf("i = %d\n", i);
1: a = {0, 0, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) 
i = 0
30          printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
1: a = {0, 0, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) 
before = {10, 10, 10, 10}
31          printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
1: a = {0, 0, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) 
a = {0, 0, 0, 0}
32          printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
1: a = {0, 0, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) 
after = {10, 10, 10, 10}
33          printf("\n");
1: a = {0, 0, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) 

36          for (i = 0; i < OVERFLOW; i++) {
1: a = {0, 0, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) 
37              a[i] = i * 10;
1: a = {0, 0, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) 
38              printf("i = %d\n", i);
1: a = {0, 0, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) 
i = 0
39              printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
1: a = {0, 0, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) 
before = {10, 10, 10, 10}
40              printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
1: a = {0, 0, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) 
a = {0, 0, 0, 0}
41              printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
1: a = {0, 0, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) 
after = {10, 10, 10, 10}
36          for (i = 0; i < OVERFLOW; i++) {
1: a = {0, 0, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) 
37              a[i] = i * 10;
1: a = {0, 0, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) 
38              printf("i = %d\n", i);
1: a = {0, 10, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) 
i = 1
39              printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
1: a = {0, 10, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) 
before = {10, 10, 10, 10}
40              printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
1: a = {0, 10, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) 
a = {0, 10, 0, 0}
41              printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
1: a = {0, 10, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) 
after = {10, 10, 10, 10}
36          for (i = 0; i < OVERFLOW; i++) {
1: a = {0, 10, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) 
37              a[i] = i * 10;
1: a = {0, 10, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) 
38              printf("i = %d\n", i);
1: a = {0, 10, 20, 0}
2: after = {10, 10, 10, 10}
(gdb) 
i = 2
39              printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
1: a = {0, 10, 20, 0}
2: after = {10, 10, 10, 10}
(gdb) 
before = {10, 10, 10, 10}
40              printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
1: a = {0, 10, 20, 0}
2: after = {10, 10, 10, 10}
(gdb) 
a = {0, 10, 20, 0}
41              printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
1: a = {0, 10, 20, 0}
2: after = {10, 10, 10, 10}
(gdb) 
after = {10, 10, 10, 10}
36          for (i = 0; i < OVERFLOW; i++) {
1: a = {0, 10, 20, 0}
2: after = {10, 10, 10, 10}
(gdb) 
37              a[i] = i * 10;
1: a = {0, 10, 20, 0}
2: after = {10, 10, 10, 10}
(gdb) 
38              printf("i = %d\n", i);
1: a = {0, 10, 20, 30}
2: after = {10, 10, 10, 10}
(gdb) 
i = 3
39              printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
1: a = {0, 10, 20, 30}
2: after = {10, 10, 10, 10}
(gdb) 
before = {10, 10, 10, 10}
40              printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
1: a = {0, 10, 20, 30}
2: after = {10, 10, 10, 10}
(gdb) 
a = {0, 10, 20, 30}
41              printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
1: a = {0, 10, 20, 30}
2: after = {10, 10, 10, 10}
(gdb) 
after = {10, 10, 10, 10}
36          for (i = 0; i < OVERFLOW; i++) {
1: a = {0, 10, 20, 30}
2: after = {10, 10, 10, 10}
(gdb) 
37              a[i] = i * 10;
1: a = {0, 10, 20, 30}
2: after = {10, 10, 10, 10}
(gdb) 
38              printf("i = %d\n", i);
1: a = {0, 10, 20, 30}
2: after = {40, 10, 10, 10}
(gdb) print &(after[0])
$1 = (int *) 0x7fffffffe930
(gdb) print &a[K)[K(a[0[K4])
$2 = (int *) 0x7fffffffe930
(gdb) e[Kquit
A debugging session is active.

        Inferior 1 [process 11033] will be killed.

Quit anyway? (y or n) Y
wolf:~/Documents/csc209/zhuobenj/lab6$ exit
exit

Script done on 2020-02-13 12:13:33-0500
